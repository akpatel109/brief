# MongoDB_brief


-> Collections and Documents
-> Collections can be considered as Tables in RDBMS
-> Documents can be considered as rows in RDBMS
-> Joins are removed by embedded documents
-> Fast read operations even on lerger scale due oo BJSON(Binary JSON)

# md directoryname to change data storage location


syntaxes:
-> use databasename (switch to database, if it is not there it will create one)
-> db.createCollection(collectionname) (to create a collection in current database)
-> db.collectionname.drop()  (to drop a collection)
-> db.dropDatabase() (to drop current database)



INSERT_____________________________________________
-> db.collectionname.insert({document})  (document->{prod_name:"Bat",price:200,use:['play','hit someone']})
-> db.collectionname.insert([{document1},{document2}])
-> db.collectionname.insertOne() || db.collectionname.insertMany()
-> if collection is not there, it will create one.
-> '_id' column is created for every document which works as primary key here



FIND________________________________
-> db.collectionname.find({where statements},{columns to be selected}) to retrieve data from collection
  ex. db.product_catalog.find( { publisher: "Dreamtech" }, { prodname: 1, price: 1 } )     (in columns 1 means show that nd 0 means dont show)
-> db.collectionname.find({where clause}).pretty()    to show in pretty format

{
        prodid: 7000001,
        prodname: "iphone 7",
        manufacturer: "apple",
        categories: {main:"electronics",sub:"smartphones"},
        year_of_launch: 2017,
        price: 60000,
        colors: ["silver","black","gold","rosegold"]
}
-> db.product_catalog.find({ "categories.main":"electronics" })  for embedded documents
-> db.product_catalog.find({ colors: "black" },{ prodname: 1 })   for array elements
  -> { field_name: { $all: [ "value1",  "value2" ] }     to show those documents which consists atleast value1 and value2
  -> db.product_catalog.find({ colors : { $all : ["black", "silver"] } },{ _id: 0, prodname: 1 })
  -> db.product_catalog.find(
	{$and:[
			{ "categories.sub": "smartphones" },
			{ manufacturer: "apple" }
	      ]
	} 
)


  -> db.product_catalog.find(
	{ "categories.main":{$ne:"electronics"} }
	{ _id: 0, prodname: 1 }
)


$eq	{field : {$eq:<value>}}
$lt	{field : {$lt:<value>}}
$gt	{field : {$gt:<value>}}
$lte	{field : {$lte:<value>}}
$gte	{field : {$gte:<value>}}
$in	{field : {$in:[value1,value2...]}}
$nin	{field : {$nin:[value1,value2...]}}

we can also specify the datatype of the value based on which we want to retrieve documents.

db.product_catalog.find(
	{ rating: { $type:10 } }
)

db.product_catalog.find(
	{ rating: { $type:"null" } }
)

Double-------1---------"double"
String-------2---------"string"
Object-------3---------"object"
Array-------4---------"array"
Binary Data-------5---------"binData"
ObjectId-------7---------"objectId"
Boolean-------8---------"bool"
Date-------9---------"date"
Null-------10---------"null"
Regular Expression-------11---------"regex"
32-bit integer-------16---------"int"



UPDATE_________________
db.collectionname.update({where},{$set:{col:value}})   ---------it will only update first matching document
db.collectionname.updateMany()   --------------------to update multiple documents

db.product_catalog.updateMany(
      { "price" : { $gt : 80000 }, "manufacturer" : "apple" },
      { $set: { "prodname" : "iphone 7 plus" } },
      { upsert: true } 
)

USING operators in UPDATE
{
        prodid: 7000001,
        prodname: "iphone 7",
        manufacturer: "apple",
        categories: {main:"electronics",sub:"smartphones"},
        year_of_launch: 2017,
        price: 60000,
        colors: ["silver","black","gold","rosegold"]
 }
 
 db.product_catalog.update(
	{ prodid: 7000001},
	{ $push: { colors: "white" } }
)

$addToSet --- adds element to array if it is not there ---  { $addToSet: {field1:value1,...}}
$pop --- removes first(-1) or last(1) element of array --- {$pop: {field1: -1 | 1 }}
$pull --- removes all instances of value or values that match a specified condition from an existing array --- 
{$pull:{field1:<value|condition>}}

$pullAll --- removes all instances of the specified values that match the listed elements exactly --- 
{$pullAll:{field1:[value1,...],}}


db.product_catalog.update(
   { ISBN: 18407806 },
   {  $inc: {  quantity: 10 } }
)

$inc --- to increment a specific field....if it is not there it will add one ---
$mul --- multiplies field with value --- {$mul:{field:number}}
$rename --- renames the field --- {$rename:{field1:name1,...}}
$set --- sets the value of a field --- {$set:{field1:value1,...}}
$unset --- removes the specified field from document --- {$unset:{field1:"",...}}
